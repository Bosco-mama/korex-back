service: korex-back
frameworkVersion: '2'

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters


provider:
  name: aws
  runtime: nodejs12.x
#  lambdaHashingVersion: 20201221
#  stage: test
#  profile: test

  memorySize: 256
  region: eu-west-1
  environment:
    DB_NAME: ${file(config/.env.${opt:stage, 'test'}.yml):DATABASE_NAME}
    ACCOUNT_ID: ${file(config/.env.${opt:stage, 'test'}.yml):ACCOUNT}
    DB_SECRETSTORE_ARN: ${file(config/.env.${opt:stage, 'test'}.yml):SECRET}
    DB_AURORACLUSTER_ARN: ${file(config/.env.${opt:stage, 'test'}.yml):CLUSTER}
    BUCKET_NAME: ${file(config/.env.${opt:stage, 'test'}.yml):BUCKET}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource: ${file(config/.env.${opt:stage, 'nonlive'}.yml):SECRET}
    - Effect: "Allow"
      Action:
        - "rds-data:*"
      Resource: ${file(config/.env.${opt:stage, 'nonlive'}.yml):CLUSTER}
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
  logs:
    httpApi: true

functions:
  korexalldata:
    handler: src/handlers/korexallbookings.send
    timeout: 29
    maximumRetryAttempts: 1
    events:
    - http:
        method: GET
        path: /bookings/{booking_account}
        cors: true
  korexcreate:
    handler: src/handlers/korexcreate.save
    timeout: 45
    maximumRetryAttempts: 1
    events:
      - http:
          method: POST
          path: /createbooking
          cors: true
  korexdelete:
    handler: src/handlers/korexdelete.delete
    timeout: 29
    maximumRetryAttempts: 1
    events:
      - http:
          method: DELETE
          path: /deletebooking/{booking_uuid}
          cors: true
 #       request:
 #         parameters:
 #           paths:
 #             booking_account: true

custom:
  bundle:
    linting: false



# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#functions:
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
